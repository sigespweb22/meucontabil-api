// <auto-generated />
using System;
using BoxBack.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BoxBack.Infra.Data.Migrations
{
    [DbContext(typeof(BoxAppDbContext))]
    partial class BoxAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("OrderNumbers");

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<string>("UniqueKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 2, 1, 8, 56, 14, 937, DateTimeKind.Unspecified).AddTicks(2556), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            IsDeleted = false,
                            Name = "Master",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UniqueKey = "ors0eAr4DPkvrwhy5gVnQAqRDnJUO43j9HzbkPyZ/7Q=",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 2, 1, 8, 56, 14, 937, DateTimeKind.Unspecified).AddTicks(2566), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int[]>("Actions")
                        .HasColumnType("integer[]");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b0f96d85-3647-4651-9f78-b7529b577ec0",
                            Actions = new[] { 0 },
                            ConcurrencyStamp = "4629cea3-3b65-43b9-9c4e-7cc68fe4e4e4",
                            Description = "Pode realizar todas as ações/operações, bem como ter acesso a todos os dados e funcionalidades",
                            Name = "Master",
                            NormalizedName = "MASTER",
                            Subject = "all"
                        },
                        new
                        {
                            Id = "528ba46c-0356-431e-a86e-6186955029a7",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "6ce9b0ec-ed92-498f-9a95-92dd87cd90f2",
                            Description = "Pode realizar todas as ações/operações em todas as dashboards",
                            Name = "CanDashboardAll",
                            NormalizedName = "CANDASHBOARDALL",
                            Subject = "ac-dashboard-page"
                        },
                        new
                        {
                            Id = "b1094847-33fe-4872-b694-c7fc9c9ac3cb",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "0a2476c9-276c-44a4-900f-844b25ac3582",
                            Description = "Pode realizar todas as ações/operações em dashboard publica",
                            Name = "CanDashboardPublicaAll",
                            NormalizedName = "CANDASHBOARDPUBLICAALL",
                            Subject = "ac-dashboardPublica-page"
                        },
                        new
                        {
                            Id = "9019b807-c03d-49c8-b3eb-1a0520e7a272",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "3afb76d5-f3a0-4fa5-b9b0-85f110f32d6c",
                            Description = "Pode realizar todas as ações/operações em todos os usuários",
                            Name = "CanUserAll",
                            NormalizedName = "CANUSERALL",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "26513c23-87ec-444d-9c51-d663f5bfdd05",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "f7910baa-c623-4283-8f66-3a884348175b",
                            Description = "Pode listar os dados de todos os usuários",
                            Name = "CanUserList",
                            NormalizedName = "CANUSERLIST",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "690b1860-2708-46b9-b910-014509f884dc",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "6a49d83c-f92d-4a23-a3fb-396d98eac331",
                            Description = "Pode listar os dados de um usuários",
                            Name = "CanUserRead",
                            NormalizedName = "CANUSERREAD",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "8d64ee64-22ab-44a4-b1df-67382b289895",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "4c095b63-0897-4835-80dc-9594df3135e4",
                            Description = "Pode criar um usuário",
                            Name = "CanUserCreate",
                            NormalizedName = "CANUSERCREATE",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "2afcfacd-63e0-4c15-8594-be42fa39c325",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "d3e4db3c-c053-4fb4-b39e-688110d7a4d9",
                            Description = "Pode atualizar os dados de um usuário",
                            Name = "CanUserUpdate",
                            NormalizedName = "CANUSERUPDATE",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "68eec4dc-0a76-4aa1-98a3-1dcc7ffa2d39",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "5762ad6e-8cb6-4f3f-a713-8188b9109f67",
                            Description = "Pode deletar um usuário",
                            Name = "CanUserDelete",
                            NormalizedName = "CANUSERDELETE",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "fe0e455f-7e3d-45f6-b6de-a0cd37215209",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "6f259a74-1b49-4f0f-87b0-8449cbcb1ba4",
                            Description = "Pode realizar todas as ações/operações em todos as roles/permissões",
                            Name = "CanRoleAll",
                            NormalizedName = "CANROLEALL",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "f27e0f7c-ef53-4f93-bcd5-c195d0cd0cfd",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "e50ce833-94b4-44f9-8671-f4cc52c43839",
                            Description = "Pode listar os dados de todas as roles/permissões",
                            Name = "CanRoleList",
                            NormalizedName = "CANROLELIST",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "1f11b82d-8149-4b08-b910-d65b0cd1d9d8",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "b13a80ec-1716-4fe2-ab8a-4670d6a4116c",
                            Description = "Pode listar os dados de uma roles/permissão",
                            Name = "CanRoleRead",
                            NormalizedName = "CANROLEREAD",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "66751c3c-1ad9-47cd-bf7e-945b524a4dc1",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "00e242ca-9390-4219-bacc-e3508e787ebe",
                            Description = "Pode criar uma role/permissão",
                            Name = "CanRoleCreate",
                            NormalizedName = "CANROLECREATE",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "8af80ad7-8a34-467c-a6e2-f451c813883b",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "0dce96a4-9b4c-4d0e-81d5-7aebb95a0e19",
                            Description = "Pode atualizar os dados de uma roles/permissão",
                            Name = "CanRoleUpdate",
                            NormalizedName = "CANROLEUPDATE",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "942c0974-2f70-4c4d-83a7-5693004cb6f6",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "1bba5282-2801-4b5d-a20e-9e27cfcfe1bb",
                            Description = "Pode deletar uma role/permissão",
                            Name = "CanRoleDelete",
                            NormalizedName = "CANROLEDELETE",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "a38cf126-fd07-44e0-88e3-ca6b78181b30",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "8cda94c6-7f92-48e6-b0d5-fcfd0d43f6b1",
                            Description = "Pode realizar todas as ações/operações em todos os grupos",
                            Name = "CanGroupAll",
                            NormalizedName = "CANGROUPALL",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "4b806712-9502-46f0-b4f6-5f9abc67b0cb",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "2c150d7f-214e-4829-84f2-ebd9942da543",
                            Description = "Pode listar os dados de todos os grupos",
                            Name = "CanGroupList",
                            NormalizedName = "CANGROUPLIST",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "3a0cd7e1-0d2f-4002-8202-19a6abe5c9f5",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "1da6dab7-9e90-409a-8911-4a0ab39449d6",
                            Description = "Pode listar os dado de um grupo",
                            Name = "CanGroupRead",
                            NormalizedName = "CANGROUPREAD",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "bd012c34-165e-4159-acec-0d1de4dbde51",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "4a08bdd6-8cf1-455e-b35e-397ac3c268a8",
                            Description = "Pode criar um grupo",
                            Name = "CanGroupCreate",
                            NormalizedName = "CANGROUPCREATE",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "1081248d-f976-48cd-ad12-d1ab7a951d7f",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "6fb23e78-47ac-45b7-9c3b-c0de273cce3e",
                            Description = "Pode atualizar os dados de um grupo",
                            Name = "CanGroupUpdate",
                            NormalizedName = "CANGROUPUPDATE",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "5b8cd6e6-cfdc-4516-b7cd-de831996ed25",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "4383f5bd-226f-4f1c-b32c-3d24da493221",
                            Description = "Pode deletar um grupo",
                            Name = "CanGroupDelete",
                            NormalizedName = "CANGROUPDELETE",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "1a86e3c7-ad7e-41cf-b439-dc1eb0f0db05",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "de1af80e-8e86-4c8a-ac9d-35f3fea433ed",
                            Description = "Pode visualizar todos os indicadores da dashboard comercial",
                            Name = "CanClienteAll",
                            NormalizedName = "CANCLIENTEALL",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "6638e42f-6acc-4801-97bd-5865c61c2ee6",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "1ee600a9-d417-4d52-bbe1-914a35acddd2",
                            Description = "Pode listar os dados de todos os clientes",
                            Name = "CanClienteList",
                            NormalizedName = "CANCLIENTELIST",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "82657fa4-7f23-4e09-ba61-24f1894f0770",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "334af10d-6705-435b-a691-7d8e4bffad4a",
                            Description = "Pode listar os dado de um cliente",
                            Name = "CanClienteRead",
                            NormalizedName = "CANCLIENTEREAD",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "d2fbac7c-7502-4004-8aa2-686812ee8022",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "0b50b786-77c9-4372-a7c1-24457c7f2aac",
                            Description = "Pode criar um cliente",
                            Name = "CanClienteCreate",
                            NormalizedName = "CANCLIENTECREATE",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "c8323299-a311-43fa-804f-deed0c202bb0",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "e9ddb4f6-5c4f-440e-b530-d5fba5dce521",
                            Description = "Pode atualizar os dados de um cliente",
                            Name = "CanClienteUpdate",
                            NormalizedName = "CANCLIENTEUPDATE",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "21299628-27c9-426e-b4f7-806d605f43d2",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "c523f829-dda5-4353-921d-807a769276c6",
                            Description = "Pode deletar um cliente",
                            Name = "CanClienteDelete",
                            NormalizedName = "CANCLIENTEDELETE",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "dda1ef7c-c033-4822-bfac-300788a30538",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "d5fae5df-68be-41eb-a13d-dd8639bc5daf",
                            Description = "Pode listar o título do sistema",
                            Name = "CanTitleSystemList",
                            NormalizedName = "CANTITLESYSTEMLIST",
                            Subject = "ac-titleSystem-page"
                        },
                        new
                        {
                            Id = "fe8b1c90-8d16-414f-a749-daff85a61f07",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "45a40863-9f17-4c45-9c93-69cee1aa6031",
                            Description = "Pode listar o título dos negócios",
                            Name = "CanTitleBussinesList",
                            NormalizedName = "CANTITLEBUSSINESLIST",
                            Subject = "ac-titleBussines-page"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRoleGroup", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("AspNetRoleGroups", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = "b0f96d85-3647-4651-9f78-b7529b577ec0",
                            GroupId = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822")
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("UserId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DataAniversario")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int>("Funcao")
                        .HasColumnType("integer");

                    b.Property<int>("Genero")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Setor")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("TelefoneCelular")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("bigint")
                        .HasDefaultValue(99999999999L);

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            Avatar = "",
                            ConcurrencyStamp = "ca431822-360a-4ee6-b978-66564d429fc7",
                            DataAniversario = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "alan.rezendeeee@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "ALAN LEITE DE REZENDE",
                            Funcao = 0,
                            Genero = 0,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALAN.REZENDEEEE@HOTMAIL.COM",
                            NormalizedUserName = "ALAN.REZENDEEEE@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFGbgHKOKiDDs5fvXN8kHviorntHToMKurnVJNmsFQNInxhQOyZTwJ2w0SpbyCdZbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9514850-61dd-4cc1-b909-88b79b035643",
                            Setor = 0,
                            Status = 0,
                            TelefoneCelular = 0L,
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            TwoFactorEnabled = false,
                            UserName = "alan.rezendeeee@hotmail.com"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("AspNetUserGroups", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            GroupId = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822")
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "b0f96d85-3647-4651-9f78-b7529b577ec0"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CNPJ")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Cep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("20");

                    b.Property<string>("Cidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("255");

                    b.Property<int?>("CodigoMunicipio")
                        .HasColumnType("integer");

                    b.Property<string>("Complemento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("50");

                    b.Property<string>("Cpf")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DataFundacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailPrincipal")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("4");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Numero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("5");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Rua")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("500");

                    b.Property<string>("TelefonePrincipal")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<int?>("TipoPessoa")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("EmailPrincipal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NomeExibicao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("text");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("WhatsAppPrincipal")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.ToTable("Tenants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            ApiKey = new Guid("57d390e7-2b87-47fe-9bc8-0bae3a388499"),
                            Cnpj = "27.195.267/0001-38",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 2, 1, 8, 56, 14, 936, DateTimeKind.Unspecified).AddTicks(990), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            EmailPrincipal = "tiago@rossokurtz.com.br",
                            IsDeleted = false,
                            Nome = "Rosso e Kurtz Contadores Associados",
                            NomeExibicao = "Rosso e Kurtz",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 2, 1, 8, 56, 14, 936, DateTimeKind.Unspecified).AddTicks(1014), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VerticalNavItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<string>("BadgeColor")
                        .HasColumnType("text");

                    b.Property<string>("BadgeContent")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExternalLink")
                        .HasColumnType("boolean");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LevelMeKey")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LevelUpKey")
                        .HasColumnType("uuid");

                    b.Property<bool>("OpenInNewTab")
                        .HasColumnType("boolean");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<string>("SectionTitle")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("VerticalNavItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VerticalNavItemId");

                    b.ToTable("VerticalNavItems", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("ApplicationGroups")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRoleGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationGroup", "ApplicationGroup")
                        .WithMany("ApplicationRoleGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationRoleGroups")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("ApplicationRole");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserClaim", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany("ApplicationUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationGroup", "ApplicationGroup")
                        .WithMany("ApplicationUserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Clientes")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VerticalNavItem", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.VerticalNavItem", null)
                        .WithMany("Children")
                        .HasForeignKey("VerticalNavItemId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.Navigation("ApplicationRoleGroups");

                    b.Navigation("ApplicationUserGroups");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRole", b =>
                {
                    b.Navigation("ApplicationRoleGroups");

                    b.Navigation("ApplicationUserRoles");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserClaims");

                    b.Navigation("ApplicationUserGroups");

                    b.Navigation("ApplicationUserRoles");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Tenant", b =>
                {
                    b.Navigation("ApplicationGroups");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VerticalNavItem", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
