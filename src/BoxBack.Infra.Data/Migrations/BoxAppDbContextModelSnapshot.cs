// <auto-generated />
using System;
using BoxBack.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BoxBack.Infra.Data.Migrations
{
    [DbContext(typeof(BoxAppDbContext))]
    partial class BoxAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<string>("UniqueKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 2, 7, 14, 47, 15, 126, DateTimeKind.Unspecified).AddTicks(9613), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            IsDeleted = false,
                            Name = "Master",
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            UniqueKey = "ors0eAr4DPkvrwhy5gVnQAqRDnJUO43j9HzbkPyZ/7Q=",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 2, 7, 14, 47, 15, 126, DateTimeKind.Unspecified).AddTicks(9638), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int[]>("Actions")
                        .HasColumnType("integer[]");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b0f96d85-3647-4651-9f78-b7529b577ec0",
                            Actions = new[] { 0 },
                            ConcurrencyStamp = "4629cea3-3b65-43b9-9c4e-7cc68fe4e4e4",
                            Description = "Pode realizar todas as ações/operações, bem como ter acesso a todos os dados e funcionalidades",
                            Name = "Master",
                            NormalizedName = "MASTER",
                            Subject = "all"
                        },
                        new
                        {
                            Id = "94cbf0c9-1ba2-46be-aab6-0372cb357ad1",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "af63fd31-1fa3-48c0-8bff-b667c0cc2bde",
                            Description = "Pode realizar todas as ações/operações em todas as dashboards",
                            Name = "CanDashboardAll",
                            NormalizedName = "CANDASHBOARDALL",
                            Subject = "ac-dashboard-page"
                        },
                        new
                        {
                            Id = "35fb2fed-ebde-4844-80d6-e4b33811fd41",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "29fe22e2-77de-48c4-951f-c159cc57decb",
                            Description = "Pode realizar todas as ações/operações em dashboard publica",
                            Name = "CanDashboardPublicaAll",
                            NormalizedName = "CANDASHBOARDPUBLICAALL",
                            Subject = "ac-dashboardPublica-page"
                        },
                        new
                        {
                            Id = "dd1add10-403b-42cc-b002-3fd17f345bbd",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "3cb5eede-2c12-4aa1-bd5a-86355f1917e8",
                            Description = "Pode realizar todas as ações/operações em todos os usuários",
                            Name = "CanUserAll",
                            NormalizedName = "CANUSERALL",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "e55bebb9-f5b5-49f5-b21e-82629ca8d2d7",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "0964b237-8ea8-4d00-9ac4-89b05a042a2b",
                            Description = "Pode listar os dados de todos os usuários",
                            Name = "CanUserList",
                            NormalizedName = "CANUSERLIST",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "8453d396-9b3a-4300-ac4d-027a0fd64db5",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "2dc7202b-1177-47db-ae19-901a7115a4de",
                            Description = "Pode listar os dados de um usuários",
                            Name = "CanUserRead",
                            NormalizedName = "CANUSERREAD",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "80b38e61-90dd-41aa-9f82-8f4c20a1e87c",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "3ba401b9-8a2c-46ae-8dd6-ffe1591822b6",
                            Description = "Pode criar um usuário",
                            Name = "CanUserCreate",
                            NormalizedName = "CANUSERCREATE",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "8d31cf7a-97b9-41ff-ae70-c03ced212c37",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "8ecba72c-8c8d-46c6-b742-f95680484004",
                            Description = "Pode atualizar os dados de um usuário",
                            Name = "CanUserUpdate",
                            NormalizedName = "CANUSERUPDATE",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "0fafd1b0-dd7b-413b-8840-8dc1e1970ac0",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "c0ec27c9-28eb-4db0-ad3c-70340b386c05",
                            Description = "Pode deletar um usuário",
                            Name = "CanUserDelete",
                            NormalizedName = "CANUSERDELETE",
                            Subject = "ac-user-page"
                        },
                        new
                        {
                            Id = "fb2d8740-1ece-4979-841e-8603b623f537",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "ce32e29b-2c7f-4cb7-ab2d-721d3aedd801",
                            Description = "Pode realizar todas as ações/operações em todos as roles/permissões",
                            Name = "CanRoleAll",
                            NormalizedName = "CANROLEALL",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "5224c4d3-0cce-41f9-a66e-c341145c0733",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "80f24ebb-39b2-427f-a2e8-5a327e9b509c",
                            Description = "Pode listar os dados de todas as roles/permissões",
                            Name = "CanRoleList",
                            NormalizedName = "CANROLELIST",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "aaed25e4-8b5e-427a-b1a0-19353ca89998",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "5f5e369b-7964-4c02-87ba-71bffc06001a",
                            Description = "Pode listar os dados de uma roles/permissão",
                            Name = "CanRoleRead",
                            NormalizedName = "CANROLEREAD",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "76098d24-666f-4ef2-8b7a-3ef425f58c42",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "61408a68-dea3-490a-b025-3f702fb1566e",
                            Description = "Pode criar uma role/permissão",
                            Name = "CanRoleCreate",
                            NormalizedName = "CANROLECREATE",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "131186c9-5e41-4309-9ade-af8711d1c502",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "863f67dd-61c8-43d4-8cb8-41677788d84b",
                            Description = "Pode atualizar os dados de uma roles/permissão",
                            Name = "CanRoleUpdate",
                            NormalizedName = "CANROLEUPDATE",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "1b77c372-fe50-480d-9a42-437a153e1da3",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "d5d886eb-9914-4b95-911e-596953119530",
                            Description = "Pode deletar uma role/permissão",
                            Name = "CanRoleDelete",
                            NormalizedName = "CANROLEDELETE",
                            Subject = "ac-role-page"
                        },
                        new
                        {
                            Id = "ac8dc43b-b039-4f6f-b66b-ff7a26440d34",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "7d6a9e1e-edd8-4bb2-942b-6e9c600b200e",
                            Description = "Pode realizar todas as ações/operações em todos os grupos",
                            Name = "CanGroupAll",
                            NormalizedName = "CANGROUPALL",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "6049a46c-31c1-4390-b6e6-93b667a9ef1c",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "37bd488b-1fb7-435e-9b7a-bb604421d4a5",
                            Description = "Pode listar os dados de todos os grupos",
                            Name = "CanGroupList",
                            NormalizedName = "CANGROUPLIST",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "76a868d7-eca3-4153-a425-46b0c9cdf257",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "2771ce4e-d94a-41cf-8a09-b8a32a467b49",
                            Description = "Pode listar os dado de um grupo",
                            Name = "CanGroupRead",
                            NormalizedName = "CANGROUPREAD",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "d28aa94e-4292-48a0-889a-1c496d8f59c8",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "6a78922b-f311-49f5-84b5-6280fdad319b",
                            Description = "Pode criar um grupo",
                            Name = "CanGroupCreate",
                            NormalizedName = "CANGROUPCREATE",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "41f844bb-b636-4a30-9055-3a06c1a73fe2",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "95ac8ce2-19ef-4eba-b8ac-f71f21db3c5c",
                            Description = "Pode atualizar os dados de um grupo",
                            Name = "CanGroupUpdate",
                            NormalizedName = "CANGROUPUPDATE",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "501714ad-c893-49fb-b7f5-65108d344720",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "234988d3-36e1-4766-a073-963194c8fa1b",
                            Description = "Pode deletar um grupo",
                            Name = "CanGroupDelete",
                            NormalizedName = "CANGROUPDELETE",
                            Subject = "ac-group-page"
                        },
                        new
                        {
                            Id = "4f084469-45c3-435b-bd80-2a1249a14414",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "fbe6e26e-1293-4d0d-91dc-c9f6a1d13573",
                            Description = "Pode realizar todas as ações/operações em todos os clientes",
                            Name = "CanClienteAll",
                            NormalizedName = "CANCLIENTEALL",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "8c98fe87-0082-44b3-a5c0-a6b39a8e56f7",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "879b1a92-b07b-4ffe-8b3a-c574383e0b09",
                            Description = "Pode listar os dados de todos os clientes",
                            Name = "CanClienteList",
                            NormalizedName = "CANCLIENTELIST",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "96639b1f-74d3-44f0-b623-f44e00a3c4a2",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "fa1d861c-2c50-4ab4-af6a-93bd75b10ffc",
                            Description = "Pode listar os dado de um cliente",
                            Name = "CanClienteRead",
                            NormalizedName = "CANCLIENTEREAD",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "cc8645fa-14f9-4aca-93d5-0ce5d8ee0f8c",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "1adeaaec-f09d-4224-95a0-5c671f042994",
                            Description = "Pode criar um cliente",
                            Name = "CanClienteCreate",
                            NormalizedName = "CANCLIENTECREATE",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "74671286-67a0-43c2-9fe2-6668009441c4",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "7bd0a3e7-4755-4060-a9df-7cedaf55d250",
                            Description = "Pode atualizar os dados de um cliente",
                            Name = "CanClienteUpdate",
                            NormalizedName = "CANCLIENTEUPDATE",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "fc913346-eb42-4fc7-9808-8d739c578d17",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "217a2c26-01ff-4941-92f0-cc1bdd8d493c",
                            Description = "Pode deletar um cliente",
                            Name = "CanClienteDelete",
                            NormalizedName = "CANCLIENTEDELETE",
                            Subject = "ac-cliente-page"
                        },
                        new
                        {
                            Id = "99cbc3dc-3fd3-47a8-9933-2f368a851f3c",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "3372b96f-a0cb-477c-a1ae-e834bbe99f7d",
                            Description = "Pode listar o título do sistema",
                            Name = "CanTitleSystemList",
                            NormalizedName = "CANTITLESYSTEMLIST",
                            Subject = "ac-titleSystem-page"
                        },
                        new
                        {
                            Id = "cf2d6fe5-4c8d-403e-98be-7f7ecdd2d515",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "b806d4b3-c8bd-4981-9f33-0035fda697cc",
                            Description = "Pode listar o título dos negócios",
                            Name = "CanTitleBussinesList",
                            NormalizedName = "CANTITLEBUSSINESLIST",
                            Subject = "ac-titleBussines-page"
                        },
                        new
                        {
                            Id = "4a219d4d-c8c1-48c1-b8e6-163fd82868bf",
                            Actions = new[] { 1, 2, 3, 4, 5 },
                            ConcurrencyStamp = "c6a02730-a3f8-46d7-8a1c-a84f048b64cf",
                            Description = "Pode realizar todas as ações/operações em todas as despesas",
                            Name = "CanDespesaAll",
                            NormalizedName = "CANDESPESAALL",
                            Subject = "ac-despesa-page"
                        },
                        new
                        {
                            Id = "405c9e0b-5119-4186-8c12-f2ca57818b7e",
                            Actions = new[] { 1 },
                            ConcurrencyStamp = "03db8363-2254-441f-8055-e0176eebcf50",
                            Description = "Pode listar os dados de todas as despesas",
                            Name = "CanDespesaList",
                            NormalizedName = "CANDESPESALIST",
                            Subject = "ac-despesa-page"
                        },
                        new
                        {
                            Id = "86660719-cc7a-414e-9a69-0407b5cea790",
                            Actions = new[] { 2 },
                            ConcurrencyStamp = "4ab6730e-8b0e-4d13-9a29-9d33e50d5831",
                            Description = "Pode listar os dados de uma despesa",
                            Name = "CanDespesaRead",
                            NormalizedName = "CANDESPESAREAD",
                            Subject = "ac-despesa-page"
                        },
                        new
                        {
                            Id = "bee09b99-5697-429a-bee8-c3f5a15abf71",
                            Actions = new[] { 3 },
                            ConcurrencyStamp = "e1b6a971-5945-40f8-9098-e2d18e9f6d25",
                            Description = "Pode criar uma despesa",
                            Name = "CanDespesaCreate",
                            NormalizedName = "CANDESPESACREATE",
                            Subject = "ac-despesa-page"
                        },
                        new
                        {
                            Id = "56028427-b01d-4be5-bd71-63c11b2523e7",
                            Actions = new[] { 4 },
                            ConcurrencyStamp = "dc98df87-441c-427c-ad4f-c4563bbbb3ae",
                            Description = "Pode atualizar os dados de uma despesa",
                            Name = "CanDespesaUpdate",
                            NormalizedName = "CANDESPESAUPDATE",
                            Subject = "ac-despesa-page"
                        },
                        new
                        {
                            Id = "3eafc6b4-afcd-4179-914e-8f281a188fe5",
                            Actions = new[] { 5 },
                            ConcurrencyStamp = "4875ffc4-e97e-4e1c-90fb-01da6d9c00ef",
                            Description = "Pode deletar uma despesa",
                            Name = "CanDespesaDelete",
                            NormalizedName = "CANDESPESADELETE",
                            Subject = "ac-despesa-page"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRoleGroup", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("AspNetRoleGroups", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = "b0f96d85-3647-4651-9f78-b7529b577ec0",
                            GroupId = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822")
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("UserId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DataAniversario")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int>("Funcao")
                        .HasColumnType("integer");

                    b.Property<int>("Genero")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Setor")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("TelefoneCelular")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("bigint")
                        .HasDefaultValue(99999999999L);

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            Avatar = "",
                            ConcurrencyStamp = "ca431822-360a-4ee6-b978-66564d429fc7",
                            DataAniversario = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "alan.rezendeeee@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "ALAN LEITE DE REZENDE",
                            Funcao = 0,
                            Genero = 0,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALAN.REZENDEEEE@HOTMAIL.COM",
                            NormalizedUserName = "ALAN.REZENDEEEE@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFGbgHKOKiDDs5fvXN8kHviorntHToMKurnVJNmsFQNInxhQOyZTwJ2w0SpbyCdZbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9514850-61dd-4cc1-b909-88b79b035643",
                            Setor = 0,
                            Status = 0,
                            TelefoneCelular = 0L,
                            TenantId = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            TwoFactorEnabled = false,
                            UserName = "alan.rezendeeee@hotmail.com"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("AspNetUserGroups", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            GroupId = new Guid("23e63d9c-283b-496b-b7d8-7dac2ef7a822")
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "b0f96d85-3647-4651-9f78-b7529b577ec0"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CNPJ")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Cep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("20");

                    b.Property<string>("Cidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("255");

                    b.Property<int?>("CodigoMunicipio")
                        .HasColumnType("integer");

                    b.Property<string>("Complemento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("50");

                    b.Property<string>("Cpf")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DataFundacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailPrincipal")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("4");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Numero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("5");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Rua")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("500");

                    b.Property<string>("TelefonePrincipal")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<int?>("TipoPessoa")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Despesa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("CustoEfetivoTotalAno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(8,6)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("CustoEfetivoTotalDia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(8,6)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("CustoEfetivoTotalMes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(8,6)")
                        .HasDefaultValue(0m);

                    b.Property<DateTimeOffset>("DataOperacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FormaPagamento")
                        .HasColumnType("integer");

                    b.Property<decimal>("Iof")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,2)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Seguro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("SistemaParcelamento")
                        .HasColumnType("integer");

                    b.Property<decimal>("Tarifa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(7,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<int>("TotalParcelas")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorEntrada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(12,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("ValorParcelado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(12,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("ValorPrincipal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(12,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("PessoaId");

                    b.ToTable("Despesas", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.DespesaParcela", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<decimal>("Amortizacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(10,6)")
                        .HasDefaultValue(0m);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DataVencimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DespesaId")
                        .HasColumnType("uuid");

                    b.Property<int>("DiasEntreParcelas")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Juros")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(10,6)")
                        .HasDefaultValue(0m);

                    b.Property<int>("ParcelaNumero")
                        .HasColumnType("integer");

                    b.Property<decimal>("SaldoFinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(12,9)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("SaldoInicial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(12,9)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorParcela")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(12,9)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("DespesaId");

                    b.ToTable("DespesasParcelas", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Pessoa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("NaturezaPessoa")
                        .HasColumnType("integer");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"));

                    b.Property<int?>("TipoPessoa")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Pessoas", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("EmailPrincipal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NomeExibicao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("text");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("WhatsAppPrincipal")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.ToTable("Tenants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8fe3845-3f2e-4b4e-aeb6-53222d60ff45"),
                            ApiKey = new Guid("57d390e7-2b87-47fe-9bc8-0bae3a388499"),
                            Cnpj = "27.195.267/0001-38",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 2, 7, 14, 47, 15, 125, DateTimeKind.Unspecified).AddTicks(5553), new TimeSpan(0, -3, 0, 0, 0)),
                            CreatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            EmailPrincipal = "tiago@rossokurtz.com.br",
                            IsDeleted = false,
                            Nome = "Rosso e Kurtz Contadores Associados",
                            NomeExibicao = "Rosso e Kurtz",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 2, 7, 14, 47, 15, 125, DateTimeKind.Unspecified).AddTicks(5588), new TimeSpan(0, -3, 0, 0, 0)),
                            UpdatedBy = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        });
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VerticalNavItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<string>("BadgeColor")
                        .HasColumnType("text");

                    b.Property<string>("BadgeContent")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExternalLink")
                        .HasColumnType("boolean");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LevelMeKey")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LevelUpKey")
                        .HasColumnType("uuid");

                    b.Property<bool>("OpenInNewTab")
                        .HasColumnType("boolean");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<string>("SectionTitle")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("VerticalNavItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VerticalNavItemId");

                    b.ToTable("VerticalNavItems", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("ApplicationGroups")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRoleGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationGroup", "ApplicationGroup")
                        .WithMany("ApplicationRoleGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationRoleGroups")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("ApplicationRole");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserClaim", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany("ApplicationUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserGroup", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationGroup", "ApplicationGroup")
                        .WithMany("ApplicationUserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Clientes")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Despesa", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Cliente", "Cliente")
                        .WithMany("Despesas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BoxBack.Domain.Models.Pessoa", "Pessoa")
                        .WithMany("Despesas")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.DespesaParcela", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Despesa", "Despesa")
                        .WithMany("DespesaParcelas")
                        .HasForeignKey("DespesaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Despesa");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Pessoa", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.Tenant", "Tenant")
                        .WithMany("Pessoas")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VerticalNavItem", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.VerticalNavItem", null)
                        .WithMany("Children")
                        .HasForeignKey("VerticalNavItemId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BoxBack.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationGroup", b =>
                {
                    b.Navigation("ApplicationRoleGroups");

                    b.Navigation("ApplicationUserGroups");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationRole", b =>
                {
                    b.Navigation("ApplicationRoleGroups");

                    b.Navigation("ApplicationUserRoles");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserClaims");

                    b.Navigation("ApplicationUserGroups");

                    b.Navigation("ApplicationUserRoles");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Cliente", b =>
                {
                    b.Navigation("Despesas");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Despesa", b =>
                {
                    b.Navigation("DespesaParcelas");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Pessoa", b =>
                {
                    b.Navigation("Despesas");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.Tenant", b =>
                {
                    b.Navigation("ApplicationGroups");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("Clientes");

                    b.Navigation("Pessoas");
                });

            modelBuilder.Entity("BoxBack.Domain.Models.VerticalNavItem", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
